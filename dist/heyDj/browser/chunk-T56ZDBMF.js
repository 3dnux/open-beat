import{a as g}from"./chunk-S6MXMXK4.js";import"./chunk-T2NSUFSZ.js";import"./chunk-32IAVZSY.js";import{a as o}from"./chunk-MFSGMIY7.js";import{a as T,c as f}from"./chunk-ACEJN2MV.js";import"./chunk-EEENIMDP.js";import"./chunk-XQMGIZNC.js";import{A as F,B as C,a as w,c as m,g as l,s as I,t as h,v as U}from"./chunk-DKJ7BJEZ.js";import{e as y,f as p}from"./chunk-EQVTEUXC.js";var E=y(U(),1);var A={NONE:"not compressed	PCM	Apple Computer",sowt:"PCM (byte swapped)",fl32:"32-bit floating point IEEE 32-bit float",fl64:"64-bit floating point IEEE 64-bit float	Apple Computer",alaw:"ALaw 2:1	8-bit ITU-T G.711 A-law",ulaw:"\xB5Law 2:1	8-bit ITU-T G.711 \xB5-law	Apple Computer",ULAW:"CCITT G.711 u-law 8-bit ITU-T G.711 \xB5-law",ALAW:"CCITT G.711 A-law 8-bit ITU-T G.711 A-law",FL32:"Float 32	IEEE 32-bit float "},i=class extends F("AIFF"){},k=class{constructor(e,t){this.isAifc=t;let a=t?22:18;if(e.chunkSize<a)throw new i(`COMMON CHUNK size should always be at least ${a}`);this.len=e.chunkSize}get(e,t){let a=m.get(e,t+8)-16398,s=m.get(e,t+8+2),n={numChannels:m.get(e,t),numSampleFrames:l.get(e,t+2),sampleSize:m.get(e,t+6),sampleRate:a<0?s>>Math.abs(a):s<<a};if(this.isAifc){if(n.compressionType=o.get(e,t+18),this.len>22){let c=w.get(e,t+22);if(c>0){let N=(c+1)%2;if(23+c+N===this.len)n.compressionName=new h(c,"latin1").get(e,t+23);else throw new i("Illegal pstring length")}else n.compressionName=void 0}}else n.compressionName="PCM";return n}};var u={len:8,get:(r,e)=>({chunkID:o.get(r,e),chunkSize:Number(BigInt(l.get(r,e+4)))})};var d=(0,E.default)("music-metadata:parser:aiff"),S=class extends C{constructor(){super(...arguments),this.isCompressed=null}parse(){return p(this,null,function*(){if((yield this.tokenizer.readToken(u)).chunkID!=="FORM")throw new i("Invalid Chunk-ID, expected 'FORM'");let t=yield this.tokenizer.readToken(o);switch(t){case"AIFF":this.metadata.setFormat("container",t),this.isCompressed=!1;break;case"AIFC":this.metadata.setFormat("container","AIFF-C"),this.isCompressed=!0;break;default:throw new i(`Unsupported AIFF type: ${t}`)}this.metadata.setFormat("lossless",!this.isCompressed),this.metadata.setAudioOnly();try{for(;!this.tokenizer.fileInfo.size||this.tokenizer.fileInfo.size-this.tokenizer.position>=u.len;){d(`Reading AIFF chunk at offset=${this.tokenizer.position}`);let a=yield this.tokenizer.readToken(u),s=2*Math.round(a.chunkSize/2),n=yield this.readData(a);yield this.tokenizer.ignore(s-n)}}catch(a){if(a instanceof T)d("End-of-stream");else throw a}})}readData(e){return p(this,null,function*(){switch(e.chunkID){case"COMM":{if(this.isCompressed===null)throw new i("Failed to parse AIFF.COMM chunk when compression type is unknown");let t=yield this.tokenizer.readToken(new k(e,this.isCompressed));return this.metadata.setFormat("bitsPerSample",t.sampleSize),this.metadata.setFormat("sampleRate",t.sampleRate),this.metadata.setFormat("numberOfChannels",t.numChannels),this.metadata.setFormat("numberOfSamples",t.numSampleFrames),this.metadata.setFormat("duration",t.numSampleFrames/t.sampleRate),(t.compressionName||t.compressionType)&&this.metadata.setFormat("codec",t.compressionName??A[t.compressionType]),e.chunkSize}case"ID3 ":{let t=yield this.tokenizer.readToken(new I(e.chunkSize)),a=f(t);return yield new g().parse(this.metadata,a,this.options),e.chunkSize}case"SSND":return this.metadata.format.duration&&this.metadata.setFormat("bitrate",8*e.chunkSize/this.metadata.format.duration),0;case"NAME":case"AUTH":case"(c) ":case"ANNO":return this.readTextChunk(e);default:return d(`Ignore chunk id=${e.chunkID}, size=${e.chunkSize}`),0}})}readTextChunk(e){return p(this,null,function*(){let a=(yield this.tokenizer.readToken(new h(e.chunkSize,"ascii"))).split("\0").map(s=>s.trim()).filter(s=>s?.length);return yield Promise.all(a.map(s=>this.metadata.addTag("AIFF",e.chunkID,s))),e.chunkSize})}};export{S as AIFFParser};
